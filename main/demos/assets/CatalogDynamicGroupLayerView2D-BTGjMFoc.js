import{q as i,v as o,x as L,V,c6 as F,g0 as b,a3 as U,fd as x,i as _,c9 as w}from"./main-CDaYavBC.js";import{S as H}from"./LayerView2D-k4E_oE_2.js";import{u as I}from"./LayerView-C7lWP6I1.js";import"./preload-helper-B76NpbEU.js";import"./utils-BQBvadb7.js";import"./Container-CxGPWdMS.js";import"./MapView-C0iMeS3a.js";import"./Cyclical-CpxVkBNZ.js";import"./CollectionFlattener-BslQWfsS.js";import"./workers-CzcYUrdx.js";import"./Queue-b1LP46tS.js";import"./intl-BzqxILdP.js";import"./projectionUtils-BEa50ges.js";import"./TileInfo-CAsHMkbk.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-fqQBepny.js";import"./uuid-Cl5lrJ4c.js";import"./sanitizerUtils-CJlLEeXg.js";import"./UpdatingHandles-YHxH36ll.js";import"./asyncUtils-BJNm8q7q.js";import"./utils-CMveVgRv.js";import"./Version-eyNBD0jv.js";import"./Map-D7gz8H2o.js";import"./Basemap-CAyf4Hl9.js";import"./loadAll-C0S9K6a_.js";import"./PortalItem-BZyj1-UR.js";import"./writeUtils-B82LELAd.js";import"./persistable-DGr-M_mS.js";import"./MD5-MtSiOt06.js";import"./multiOriginJSONSupportUtils-C0wm8_Yw.js";import"./resourceExtension-CcqIS43B.js";import"./PolygonCollection-Chb9vr5-.js";import"./editableLayers-CBDeX1_O.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-Dsmt3ai7.js";import"./common-DQOJ18NT.js";import"./TablesMixin-owpv5uDZ.js";import"./Layer-C8cI1IhR.js";import"./TimeExtent-D-q0-4Ae.js";import"./GraphicsCollection-CO6DOIW-.js";import"./HeightModelInfo-CK_3F5s4.js";import"./timeZoneUtils-l8F8UD1r.js";import"./ReactiveMap-DIgrC8ef.js";import"./Query-BH7XgQGe.js";import"./Field-BY2Hm51a.js";import"./fieldType-gik0Dj3h.js";import"./IViewEvents-Bci6PjlS.js";import"./mat2df64-CH-gvrN5.js";import"./a11yUtils-CcyLXA1F.js";import"./projectionUtils-B-nUVZ7S.js";import"./ViewingMode-Chk7YAAL.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Cgb6qxNH.js";import"./mat2d-D9DBP-jx.js";import"./normalizeUtils-Kw52Ehk7.js";import"./normalizeUtilsCommon-D4xOi1sS.js";import"./utils-Brmifrbz.js";import"./utils-D-FBWlul.js";import"./mat2df32-Dpt2CT5P.js";import"./mat3-CruJiiUv.js";import"./vec2f32-CaVKkSa6.js";import"./Scheduler-BFZUU5m6.js";import"./debugFlags-CGjKT20a.js";import"./vec32-CNKaBUUS.js";import"./unitBezier-B1N-tmtC.js";import"./enums-C6efg8un.js";import"./TileKey-BNL18LAZ.js";import"./quickselect-QQC62dOK.js";import"./definitions-CASyCajO.js";import"./enums-UBzvFP7O.js";import"./Texture-BRvChXa3.js";import"./getDataTypeBytes-D2DiHx_d.js";import"./imageUtils-B7Fkw1Kk.js";import"./capabilities-Bi6C4OG6.js";import"./modeUtils-1fSvrGRf.js";import"./ILyr3DWasmPerSceneView-CIC-HPGZ.js";import"./ColorBackground-DP8CVx2K.js";import"./EffectView-D8feRgjq.js";import"./parser-DuExENyV.js";import"./layerViewUtils-BD07JbO7.js";const u=Symbol(),O=m=>{let e=class extends m{constructor(){super(...arguments),this.layerViews=new V,this._debouncedUpdate=F(async()=>{const{layer:r,parent:a}=this,p=a?.footprintLayerView;let s=[];const n=this._createQuery();if(n&&p){const{features:y}=await p.queryFeatures(n);this.suspended||(s=y.map(h=>r.acquireLayer(h)))}this.removeHandles(u),this.addHandles(s,u)})}get creatingLayerViews(){return this.view?.layerViewManager.isCreatingLayerViewsForLayer(this.layer)??!1}isUpdating(){return this.creatingLayerViews||this.layer.updating||this.layerViews.some(r=>r.updating)}enableLayerUpdates(){return b([this._updatingHandles.addWhen(()=>this.parent?.footprintLayerView?.dataUpdating===!1,()=>this.updateLayers()),this._updatingHandles.add(()=>[this.layer.maximumVisibleSublayers,this.layer.parent?.orderBy,this.parent?.footprintLayerView?.filter,this.parent?.footprintLayerView?.timeExtent,this.suspended],()=>this.updateLayers()),U(()=>this.removeHandles(u))])}updateLayers(){this.suspended?this.removeHandles(u):this._updatingHandles.addPromise(x(this._debouncedUpdate()).catch(r=>{_.getLogger(this).error(r)}))}_createQuery(){const r=this.parent?.footprintLayerView,a=this.layer?.parent;if(!r||!a||a.destroyed)return null;const{layer:{maximumVisibleSublayers:p},view:{scale:s}}=this;if(!p)return null;const{itemTypeField:n,itemSourceField:y,itemNameField:h,minScaleField:c,maxScaleField:f,objectIdField:v,orderBy:$}=a,S=w(`${c} IS NULL OR ${s} <= ${c} OR ${c} = 0`,`${f} IS NULL OR ${s} >= ${f}`),d=$?.find(l=>l.field&&!l.valueExpression),t=r.createQuery();if(t.returnGeometry=!1,t.num=p,t.outFields=[v,y,h],t.where=w(t.where,S),this.unsupportedItemTypes!=null){const l=`${n} NOT IN (${this.unsupportedItemTypes.map(C=>`'${C}'`)})`;t.where=w(t.where,l)}return d?.field&&(t.orderByFields=[`${d.field} ${d.order==="descending"?"DESC":"ASC"}`],t.outFields.push(d.field)),t}};return i([o({readOnly:!0})],e.prototype,"creatingLayerViews",null),i([o()],e.prototype,"layer",void 0),i([o()],e.prototype,"layerViews",void 0),i([o({readOnly:!0})],e.prototype,"unsupportedItemTypes",void 0),i([o()],e.prototype,"parent",void 0),i([o({readOnly:!0})],e.prototype,"isUpdating",null),e=i([L("esri.views.layers.CatalogDynamicGroupLayerView")],e),e};let g=class extends O(H(I)){constructor(){super(...arguments),this.unsupportedItemTypes=["Scene Service"],this.layerViews=new V}attach(){this.addAttachHandles([this.layerViews.on("after-changes",()=>this._updateStageChildren()),this.enableLayerUpdates()])}detach(){this.container.removeAllChildren()}update(m){this.updateLayers()}viewChange(){}moveEnd(){this.requestUpdate()}_updateStageChildren(){this.container.removeAllChildren(),this.layerViews.forEach((m,e)=>this.container.addChildAt(m.container,e))}};g=i([L("esri.views.2d.layers.CatalogDynamicGroupLayerView2D")],g);const at=g;export{at as default};
