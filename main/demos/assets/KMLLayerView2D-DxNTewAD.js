import{z as G,b_ as $,q as c,v as u,x as z,b$ as T,$ as N,V as O,ad as F,n as W,M as C,I as U,gY as E,cb as K,gZ as H}from"./main-CDaYavBC.js";import{K as Y,O as j}from"./projectionUtils-BEa50ges.js";import{b as P,g as J,d as Q}from"./kmlUtils-ClhMV924.js";import{f as X}from"./utils-Brmifrbz.js";import{c as M}from"./GraphicsCollection-CO6DOIW-.js";import{g as Z,f as tt,S as it}from"./BitmapTechnique-CEMOPDDi.js";import{r as et}from"./BitmapContainer-B_8FIujI.js";import{S as rt}from"./LayerView2D-k4E_oE_2.js";import{t as R}from"./GraphicContainer-Bpw4iPOH.js";import{O as k}from"./GraphicsView2D-ChE7vGQp.js";import{u as ot}from"./LayerView-C7lWP6I1.js";import{execute as at}from"./projectOperator-Bg0BOy0V.js";import{_ as st,s as nt,v as pt}from"./rasterProjectionHelper-06KKJKXq.js";import{v as lt,o as mt,n as ht}from"./RenderingContext-Dxk7uiou.js";import{P as A,M as ct,X as dt}from"./enums-UBzvFP7O.js";import{R as ut}from"./FramebufferObject-BJRAnWKM.js";import{m as gt}from"./rasterUtils-Dk1-sbKE.js";import{a as q,S as _t}from"./Texture-BRvChXa3.js";import"./preload-helper-B76NpbEU.js";import"./jsonUtils-C5DfFyf4.js";import"./typeUtils-rPUifWf5.js";import"./ClassBreaksRenderer-40z-DQtI.js";import"./commonProperties-BMBe5bWp.js";import"./colorRamps-DzsbC3cW.js";import"./ColorStop-DmUhEr4J.js";import"./visualVariableUtils-BYN3JDVb.js";import"./lengthUtils-C0OYbwAD.js";import"./RendererLegendOptions-C-E5dOdm.js";import"./LRUCache-BB1cebTv.js";import"./MemCache-BSBM3Sy1.js";import"./DictionaryScriptEvaluator-Ba3P4t7p.js";import"./Version-eyNBD0jv.js";import"./FieldsIndex-CTbScFzO.js";import"./UnknownTimeZone-DGuDKAWY.js";import"./timeZoneUtils-l8F8UD1r.js";import"./ArcadeExpression-B6Vt8MC3.js";import"./TimeOnly-xPWdJOM5.js";import"./enum-DCgV3cyC.js";import"./utils-BV7DBUkI.js";import"./defaultCIMValues-CQAn2izL.js";import"./enums-_AFKM9Yk.js";import"./heatmapUtils-D1KdJD9i.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-DPb6J-GU.js";import"./SimpleRenderer-C2ZZF9wm.js";import"./UniqueValueRenderer-Bll-3Wu8.js";import"./diffUtils-BL611_ju.js";import"./styleUtils-BRX5Bp5D.js";import"./FeatureSet-Cwz-rcsn.js";import"./Field-BY2Hm51a.js";import"./fieldType-gik0Dj3h.js";import"./mat3-CruJiiUv.js";import"./MapView-C0iMeS3a.js";import"./Cyclical-CpxVkBNZ.js";import"./CollectionFlattener-BslQWfsS.js";import"./workers-CzcYUrdx.js";import"./Queue-b1LP46tS.js";import"./intl-BzqxILdP.js";import"./TileInfo-CAsHMkbk.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-fqQBepny.js";import"./uuid-Cl5lrJ4c.js";import"./sanitizerUtils-CJlLEeXg.js";import"./UpdatingHandles-YHxH36ll.js";import"./asyncUtils-BJNm8q7q.js";import"./utils-CMveVgRv.js";import"./Map-D7gz8H2o.js";import"./Basemap-CAyf4Hl9.js";import"./loadAll-C0S9K6a_.js";import"./PortalItem-BZyj1-UR.js";import"./writeUtils-B82LELAd.js";import"./persistable-DGr-M_mS.js";import"./MD5-MtSiOt06.js";import"./multiOriginJSONSupportUtils-C0wm8_Yw.js";import"./resourceExtension-CcqIS43B.js";import"./PolygonCollection-Chb9vr5-.js";import"./editableLayers-CBDeX1_O.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-Dsmt3ai7.js";import"./TablesMixin-owpv5uDZ.js";import"./Layer-C8cI1IhR.js";import"./TimeExtent-D-q0-4Ae.js";import"./HeightModelInfo-CK_3F5s4.js";import"./ReactiveMap-DIgrC8ef.js";import"./Query-BH7XgQGe.js";import"./IViewEvents-Bci6PjlS.js";import"./mat2df64-CH-gvrN5.js";import"./a11yUtils-CcyLXA1F.js";import"./projectionUtils-B-nUVZ7S.js";import"./ViewingMode-Chk7YAAL.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Cgb6qxNH.js";import"./mat2d-D9DBP-jx.js";import"./normalizeUtils-Kw52Ehk7.js";import"./normalizeUtilsCommon-D4xOi1sS.js";import"./utils-D-FBWlul.js";import"./mat2df32-Dpt2CT5P.js";import"./vec2f32-CaVKkSa6.js";import"./Scheduler-BFZUU5m6.js";import"./debugFlags-CGjKT20a.js";import"./vec32-CNKaBUUS.js";import"./unitBezier-B1N-tmtC.js";import"./enums-C6efg8un.js";import"./TileKey-BNL18LAZ.js";import"./quickselect-QQC62dOK.js";import"./definitions-CASyCajO.js";import"./imageUtils-B7Fkw1Kk.js";import"./capabilities-Bi6C4OG6.js";import"./modeUtils-1fSvrGRf.js";import"./ILyr3DWasmPerSceneView-CIC-HPGZ.js";import"./ColorBackground-DP8CVx2K.js";import"./Container-CxGPWdMS.js";import"./EffectView-D8feRgjq.js";import"./parser-DuExENyV.js";import"./GraphShaderModule-AiRxaSsg.js";import"./ProgramTemplate-DWseCOFJ.js";import"./ShaderBuilder-B7PZZWEL.js";import"./BindType-BBwFZqyN.js";import"./TechniqueType-CFPo0AVB.js";import"./bitmapUtils-azZ00U12.js";import"./WGLContainer-DvMbcPCR.js";import"./Utils-DUwqjNuk.js";import"./BoundingBox-BSOANoLO.js";import"./getDataTypeBytes-D2DiHx_d.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./VertexArrayObject-nJD8aQIh.js";import"./memoryEstimations-B1ahTpyU.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-CQkO14Uj.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-Datj5hl5.js";import"./OptimizedFeature-D-ym_oB5.js";import"./OptimizedGeometry-CY7XchFR.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./utils-BQBvadb7.js";import"./layerViewUtils-BD07JbO7.js";import"./AGraphicContainer-DbZUuRuI.js";import"./TechniqueInstance-DUqQLA7Q.js";import"./UpdateTracking2D-BiyQMNhY.js";import"./TileContainer-BJADJtEl.js";import"./FeatureCommandQueue-CGgCi4_b.js";import"./CIMSymbolHelper-BlC4DRYZ.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-DJhksovY.js";import"./GeometryUtils-Dmb7VlMK.js";import"./rasterizingUtils-C1GMGuGd.js";import"./floatRGBA-BhX44a7T.js";import"./Rect-CUzevAry.js";import"./utils-CEVT_d-f.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-B6NviFHX.js";import"./OverrideHelper-DRmRPdup.js";import"./colorUtils-ClEOeWzw.js";import"./callExpressionWithFeature-B8buA-Pe.js";import"./quantizationUtils-DgVMX_8x.js";import"./AttributeStore-DxGbh7Jj.js";import"./labelUtils-D4HYOu-f.js";import"./queryUtils-BjxX4F31.js";import"./json-Wa8cmqdu.js";import"./timeSupport-DVsu3jd4.js";import"./normalizeUtilsSync-DWluW_a6.js";import"./mat3f64-B5o_lm6j.js";import"./dehydratedFeatures-BBdZMhna.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./webglDeps-DJAX6fy5.js";import"./NestedMap-BwbkO4RU.js";import"./renderState-D2jq0MiL.js";import"./basicInterfaces-CZwQPxTp.js";import"./glsl-Cj7KC756.js";import"./testSVGPremultipliedAlpha-B41Alltu.js";let g=class extends G{constructor(){super(...arguments),this.id=0,this.rotation=0,this.href="",this.extent=new $}};c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"id",void 0),c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"rotation",void 0),c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"href",void 0),c([u({type:$,nonNullable:!0,json:{write:!0}})],g.prototype,"extent",void 0),g=c([z("esri.layers.support.KMLMapImage")],g);class h{static{this._instanceRefCount=0}constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(h._instance)return h._instanceRefCount++,h._instance;h._instanceRefCount=1,h._instance=this,this._ownsRctx=!0;const e=document.createElement("canvas").getContext("webgl2");e.getExtension("OES_texture_float"),this._rctx=new lt(e,{})}const r={applyProjection:!0,bilinear:!1,bicubic:!1},a=mt("raster/reproject","raster/reproject",new Map([["a_position",0]]),r);this._program=this._rctx.programCache.acquire(a.shaders.vertexShader,a.shaders.fragmentShader,a.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new ht(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,r,a=!1){const e=at(t.extent,r),o=new T({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:p,y:l}=st(o,r,t.extent);let n=(p+l)/2;const s=Math.round((e.xmax-e.xmin)/n),w=Math.round((e.ymax-e.ymin)/n);n=(e.width/s+e.height/w)/2;const D=new T({x:n,y:n,spatialReference:e.spatialReference}),y=nt({projectedExtent:e,srcBufferExtent:t.extent,pixelSize:D,hasWrapAround:!0,spacing:[16,16]}),x=gt(this._rctx,y),b=new q(s,w);b.wrapMode=A.CLAMP_TO_EDGE;const m=new ut(this._rctx,b);this._rctx.bindFramebuffer(m),this._rctx.setViewport(0,0,s,w),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(x,1),this._quad.bind();const{width:V=0,height:v=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",V,v),this._program.setUniform2fv("u_transformSpacing",y.spacing),this._program.setUniform2fv("u_transformGridSize",y.size),this._program.setUniform2f("u_targetImageSize",s,w),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),x.dispose(),a){const{width:d,height:I}=m,f=new ImageData(d??0,I??0);m.readPixels(0,0,d??0,I??0,ct.RGBA,dt.UNSIGNED_BYTE,f.data);const B=m.detachColorTexture();return m.dispose(),{texture:B,extent:e,imageData:f}}const S=m.detachColorTexture();return m.dispose(),{texture:S,extent:e}}reprojectBitmapData(t,r){const a=Z(t.bitmapData)?tt(t.bitmapData):t.bitmapData,e=new q;e.wrapMode=A.CLAMP_TO_EDGE,e.width=t.bitmapData.width,e.height=t.bitmapData.height;const o=new _t(this._rctx,e,a),p=this.reprojectTexture({texture:o,extent:t.extent},r,!0);p.texture.dispose();const l=document.createElement("canvas"),n=p.imageData;return l.width=n.width,l.height=n.height,l.getContext("2d").putImageData(n,0,0),{bitmapData:l,extent:p.extent}}async loadAndReprojectBitmapData(t,r,a){const[e]=await Promise.all([N(t,{responseType:"image"}).then(s=>s.data),pt()]),o=document.createElement("canvas");o.width=e.width,o.height=e.height;const p=o.getContext("2d");p.drawImage(e,0,0);const l=p.getImageData(0,0,o.width,o.height);if(r.spatialReference.equals(a))return{bitmapData:l,extent:r};const n=this.reprojectBitmapData({bitmapData:l,extent:r},a);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(h._instanceRefCount--,h._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),h._instance=null)):(this._quad.dispose(),this._program.dispose())}}class L{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let _=class extends rt(ot){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new et,this._kmlVisualData=new L,this._fetchController=null,this.allVisiblePoints=new M,this.allVisiblePolylines=new M,this.allVisiblePolygons=new M,this.allVisibleMapImages=new O}async hitTest(i,t){const r=this.layer;return[this._pointsView?.hitTest(i),this._polylinesView?.hitTest(i),this._polygonsView?.hitTest(i)].flat().filter(Boolean).map(a=>(a.layer=r,a.sourceLayer=r,{type:"graphic",graphic:a,layer:r,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new k({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new k({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new k({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),F(()=>this.layer.visibleSublayers,i=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of i){const r=this._kmlVisualData.allSublayers.get(t.id);r&&(r.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new h}detach(){this._fetchController=W(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=C(this._polygonsView),this._polylinesView=C(this._polylinesView),this._pointsView=C(this._pointsView),this._imageReprojector=C(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference?.isWGS84||this.view.spatialReference?.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,i.extent,this.view.spatialReference).then(t=>{const r=new it(t.bitmapData);r.x=t.extent.xmin,r.y=t.extent.ymax,r.resolution=t.extent.width/t.bitmapData.width,r.rotation=i.rotation,this._mapImageContainer.addChild(r),this._bitmapIndex.set(i,r)})}async _getViewDependentUrl(i,t){const{viewFormat:r,viewBoundScale:a,httpQuery:e}=i;if(r!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let o;if(await Y(),a!=null&&a!==1){const d=new $(t.extent);d.expand(a),o=d}else o=t.extent;o=j(o,U.WGS84);const p=j(o,U.WebMercator),l=o.xmin,n=o.xmax,s=o.ymin,w=o.ymax,D=t.size[0]*t.pixelRatio,y=t.size[1]*t.pixelRatio,x=Math.max(p.width,p.height),b={"[bboxWest]":l.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":s.toString(),"[bboxNorth]":w.toString(),"[lookatLon]":o.center.x.toString(),"[lookatLat]":o.center.y.toString(),"[lookatRange]":x.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":o.center.x.toString(),"[lookatTerrainLat]":o.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":o.center.x.toString(),"[cameraLat]":o.center.y.toString(),"[cameraAlt]":x.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":D.toString(),"[vertPixels]":y.toString(),"[terrainEnabled]":"0","[clientVersion]":H,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},m=d=>{for(const I in d){let f;for(f in b)d[I]=d[I].replace(f,b[f])}},V=E(r);m(V);let v={};e!=null&&(v=E(e),m(v));const S=X(i.href);return S.query={...S.query,...V,...v},`${S.path}?${K(V)}`}return i.href}async _fetchService(i){const t=new L;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!t?.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,r){return this._fetchParsedKML(i,r).then(async a=>{for(const e of a.sublayers){t.allSublayers.set(e.id,e);const o=e.points?await P(e.points):[],p=e.polylines?await P(e.polylines):[],l=e.polygons?await P(e.polygons):[],n=e.mapImages?.map(s=>g.fromJSON(s))??[];if(t.allPoints.push(...o.map(s=>({item:s,sublayerId:e.id}))),t.allPolylines.push(...p.map(s=>({item:s,sublayerId:e.id}))),t.allPolygons.push(...l.map(s=>({item:s,sublayerId:e.id}))),t.allMapImages.push(...n.map(s=>({item:s,sublayerId:e.id}))),e.networkLink){const s=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(s,t,r)}}})}_fetchParsedKML(i,t){return J(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(r=>Q(r.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};c([u()],_.prototype,"_pointsView",void 0),c([u()],_.prototype,"_polylinesView",void 0),c([u()],_.prototype,"_polygonsView",void 0),c([u()],_.prototype,"updating",void 0),_=c([z("esri.views.2d.layers.KMLLayerView2D")],_);const Pr=_;export{Pr as default};
